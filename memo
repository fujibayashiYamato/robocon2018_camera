データの保存
rosbag record -a
rosbag record /kinect2/sd/image_color_rect /kinect2/sd/image_depth_rect /kinect2/sd/camera_info /chatter

データの再生
rosbag play bagfiles/2018-02-26-15-47-55.bag
2018-02-27-09-35-54.bag

変換(親、子、時間)
listener.lookupTransform("/turtle2", "/turtle1",ros::Time(0), transform);

tf_treeが開けるよ
rqt plaguin vijiara tf_tree

rqt_graphがみれる
rqt_graph

rvizでtf
fixd frame を原点に
Add TF

cameraの名前　ジョイント
rostopic echo /kinect2/sd/image_color_rect | grep frame_id
kinect2_ir_optical_frame

やり方
listener.lookupTransform("/turtle2", "/turtle1",ros::Time(0), transform);
//"/turtle2"から見た"/turtle1"のデータをtransformに入れる
transformからほしい値を出す

ランチにまとめると楽だよ
roslaunch kinect2_viewer pcl.launch

rosrun rosserial_python serial_node.py _port:=/dev/ttyUSB0 _baud:=115200

トピックの送信

rostopic pub /array std_msgs/Float32MultiArray '{data: [4.565,3.275]}'

//TZ1
rostopic pub /chatter std_msgs/Float32MultiArray '{data: [4.565,3.275,0.0]}'
//TZ2
rostopic pub /chatter std_msgs/Float32MultiArray '{data: [6.565,3.275,0.0]}'
//TZ3
rostopic pub /chatter std_msgs/Float32MultiArray '{data: [6.565,6.535,0.0]}'
//その他
rostopic pub /chatter std_msgs/Float32MultiArray '{data: [6.565,5.275,0.0]}'

受信
rostopic echo /array

roslaunch本番用
<launch>
    <node pkg="kinect2_viewer" type="kinect2_viewer" name="kinect2_viewer" output="screen" args="kinect2 sd pcl"/>
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
      <param name="port" value="/dev/ttyUSB0"/>
      <param name="baud" value="115200"/>
    </node>
</launch>

roslaunchデバック用
<launch>
    <node pkg="kinect2_viewer" type="kinect2_viewer" name="kinect2_viewer" output="screen" args="kinect2 sd pcl"/>
    <node pkg="rosbag" type="play" name="player" args="--clock /home/ubuntu/bagfiles/free.bag"/>
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
      <param name="port" value="/dev/ttyUSB0"/>
      <param name="baud" value="115200"/>
    </node>
    <node pkg="rosserial_test" type="rosserial_test" name="rosserial_test"/>
</launch>

roslaunch kinect2_bridge kinect2_bridge.launch depth_method:=opengl reg_method:=cpu

y=ax^2+bx+c

ax^2+bx+(c-y)=0
-0.158289
-0.007983
